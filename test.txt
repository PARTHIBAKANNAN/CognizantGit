def token_required(role=None):
    """Decorator to check if the request has a valid JWT token and the required role."""
    def decorator(f):
        @wraps(f)
        def decorated(*args, **kwargs):
            auth_header = request.headers.get("Authorization")
            if not auth_header:
                return {"message": "Token is missing"}, 401
            try:
                token = auth_header.split(" ")[1]
                decoded = jwt.decode(token, SECRET_KEY, algorithms=["HS256"])
                request.user = decoded
                if role and decoded.get("role") != role:
                    return {"success": False, "message": "Unauthorized role"}, 403
            except jwt.ExpiredSignatureError:
                return {"success": False, "message": "Token has expired"}, 401
            except jwt.InvalidTokenError:
                return {"success": False, "message": "Invalid token"}, 401
            return f(*args, **kwargs)
        return decorated
    return decorator



@professional_ns.route("/login")
class ProfessionalLogin(Resource):
    @professional_ns.expect(login_model)
    def post(self):
        """Authenticate professional and return JWT token"""
        data = request.json
        username = data.get("username")
        password = data.get("password")

        user = User.query.filter((User.username == username) | (User.email == username)).first()
        if user and bcrypt.check_password_hash(user.password_hash, password):
            if user.role == "professional":
                professional = Professional.query.filter_by(user_id = user.id).first()
                if professional.is_approved:
                    payload = {
                        "sub": str(user.id),
                        "prof_id": str(professional.id),
                        "username": user.username,
                        "role": user.role,
                        "exp": datetime.utcnow() + timedelta(hours=1)
                    }
                    token = jwt.encode(payload, SECRET_KEY, algorithm="HS256")
                    return {"success": True, "token": token}, 200
                else:
                    return {"success": False, "message": "Awaiting for approval from Admin"}, 401
            else:
                return {"success": False, "message": "User is not Professional"}, 401
        return {"success": False, "message": "Invalid credentials"}, 401
